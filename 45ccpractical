BULLY ALGORITHM
---------------
class Bully:
    def __init__(self):
        self.st = []
        self.prio = []
        self.co = 0
        self.n = int(input("Enter number of processes: "))

    def getval(self):
        for i in range(self.n):
            print(f"Enter Status of process {i+1} (1=Up, 0=Down):")
            self.st.append(int(input()))
            print("Enter Priority of the process:")
            self.prio.append(int(input()))

    def elect(self, ele):
        ele = ele - 1
        self.co = ele + 1
        for i in range(self.n):
            if self.prio[ele] < self.prio[i]:
                print(f"Election message is sent from {ele+1} to {i+1}")
                if self.st[i] == 1:
                    self.elect(i+1)
        return self.co

    def startelect(self):
        ele = int(input("Which process will initiate election? "))
        print("Final coordinator is:", self.elect(ele))

obj = Bully()
obj.getval()
obj.startelect()
-----------------------------------------------------------------------------
RING Algorithm
--------------
import random
import time
from threading import Thread, Lock

num_processes = 5

class Process:
    def __init__(self, pid):
        self.pid = pid
        self.is_leader = False
        self.lock = Lock()

    def run(self):
        time.sleep(random.uniform(0.1, 0.5))

        next_process = (self.pid + 1) % num_processes
        with processes[next_process].lock:
            if not processes[next_process].is_leader:
                print(f"Process {self.pid} sends a message to Process {next_process}")

            if self.pid == max([p.pid for p in processes]):
                self.is_leader = True
                print(f"Process {self.pid} becomes the leader")

processes = [Process(pid) for pid in range(num_processes)]

threads = [Thread(target=process.run) for process in processes]
for thread in threads:
    thread.start()

for thread in threads:
    thread.join()

leader = [p for p in processes if p.is_leader][0]
print(f"Leader elected: Process {leader.pid}")
