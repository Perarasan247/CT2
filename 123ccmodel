RPC
---
#Server
from jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer

def findsum(num1, num2):
    res = num1 + num2
    return res

def main():
    server = SimpleJSONRPCServer(('localhost', 1006))
    server.register_function(findsum)
    print("Server started on port 1006...")
    server.serve_forever()

if __name__ == '__main__':
    main()

#Client
from jsonrpclib import Server

def main():
    conn = Server('http://localhost:1006')
    result = conn.findsum(100, 200)
    print("Result from server:", result)

if __name__ == '__main__':
    main()
-------------------------------------------------------------------
MAPREDUCE
---------
import threading

data = ["hello world", "hello again", "hello world again"]

mapped = []
lock = threading.Lock()

def map_function(text):
    local = []
    words = text.split()
    for word in words:
        local.append((word, 1))
    with lock:
        mapped.extend(local)

threads = []
for line in data:
    t = threading.Thread(target=map_function, args=(line,))
    threads.append(t)
    t.start()

for t in threads:
    t.join()

print("Mapped Output:", mapped)

shuffle = {}
for word, count in mapped:
    if word in shuffle:
        shuffle[word].append(count)
    else:
        shuffle[word] = [count]

reduced = {}
for word, counts in shuffle.items():
    reduced[word] = sum(counts)

print("\nFinal Word Count:", reduced)
--------------------------------------------------------------------
BULLY ALGORITHM
---------------
class Bully:
    def __init__(self):
        self.st = []
        self.prio = []
        self.co = 0
        self.n = int(input("Enter number of processes: "))

    def getval(self):
        for i in range(self.n):
            print(f"Enter Status of process {i+1} (1=Up, 0=Down):")
            self.st.append(int(input()))
            print("Enter Priority of the process:")
            self.prio.append(int(input()))

    def elect(self, ele):
        ele = ele - 1
        self.co = ele + 1
        for i in range(self.n):
            if self.prio[ele] < self.prio[i]:
                print(f"Election message is sent from {ele+1} to {i+1}")
                if self.st[i] == 1:
                    self.elect(i+1)
        return self.co

    def startelect(self):
        ele = int(input("Which process will initiate election? "))
        print("Final coordinator is:", self.elect(ele))

obj = Bully()
obj.getval()
obj.startelect()
